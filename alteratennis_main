-- Mirka Mandich and Matthew Horn
-- ECEGR-2210-01 Programmable Devices
-- Final Project: Altera Tennis

-- Last Mod: 3/16/2017
-- Due Date: 3/17/2017

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all; 

ENTITY make_image1 IS
PORT( vsync: IN STD_LOGIC;
pixel_row:  IN INTEGER RANGE 0 TO 480; 
pixel_column: IN INTEGER RANGE 0 TO 640;
red, green, blue: OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
pushbuttom_top, pushbuttom_bottom: IN STD_LOGIC; -- player one
pushbuttom_top_2, pushbuttom_bottom_2: IN STD_LOGIC; -- player two
player1_score, player2_score: OUT INTEGER RANGE 0 TO 9);
END;

ARCHITECTURE image OF make_image1 IS

SIGNAL ball_on, wall_on, paddle_on, paddle_on_2: STD_LOGIC;
SIGNAL objects: STD_LOGIC_VECTOR(3 DOWNTO 0);
-------------
SIGNAL size: INTEGER RANGE   0 TO 25;  
SIGNAL ball_y_motion: INTEGER RANGE -20 TO 10; 
SIGNAL ball_y_pos: INTEGER RANGE -20 TO 490; 
SIGNAL ball_x_motion: INTEGER RANGE -20 TO 10;
SIGNAL ball_x_pos:    INTEGER RANGE -10 TO 650; 
-------------
CONSTANT bottom_of_screen: INTEGER := 480;
CONSTANT top_of_screen: INTEGER := 1;
CONSTANT left_of_screen: INTEGER := 2; 
CONSTANT right_of_screen: INTEGER := 640;
CONSTANT frame_thickness: INTEGER := 40;
-------------
CONSTANT divider_left: INTEGER := (right_of_screen/2) - 3;
CONSTANT divider_right: INTEGER := divider_left + 6;
CONSTANT serviceL_left: INTEGER := (right_of_screen/4) - 2;
CONSTANT serviceL_right: INTEGER := serviceL_left + 4;
CONSTANT serviceR_left: INTEGER := ((right_of_screen/4)*3) - 2;
CONSTANT serviceR_right: INTEGER := serviceR_left + 4;
CONSTANT middivide_top: INTEGER := (bottom_of_screen/2) - 2;
CONSTANT middivide_bottom: INTEGER := middivide_top + 4;
CONSTANT middivide_left: INTEGER := serviceL_left;
CONSTANT middivide_right: INTEGER := serviceR_right;
CONSTANT center_x: INTEGER := bottom_of_screen/2;
CONSTANT center_y: INTEGER := right_of_screen/2;
-------------
CONSTANT score_begin: INTEGER := 0;
CONSTANT score_win: INTEGER := 9; 
SIGNAL p1_score, p2_score: INTEGER RANGE 0 TO 10 := score_begin;
-------------
CONSTANT paddle_width: INTEGER := 10;
CONSTANT paddle_height: INTEGER := 30;
-- paddle one [left paddle]
SIGNAL paddle_x_left, paddle_x_right: INTEGER RANGE 5 TO 200; 
SIGNAL paddle_y_bottom, paddle_y_top: INTEGER RANGE 30 TO 460; 
SIGNAL move_paddle: INTEGER RANGE 0 TO 10;
-- paddle two [right paddle]
SIGNAL paddle_x_left_2, paddle_x_right_2: INTEGER RANGE 425 TO 620;
SIGNAL paddle_y_bottom_2, paddle_y_top_2: INTEGER RANGE 30 TO 460; 
SIGNAL move_paddle_2: INTEGER RANGE 0 TO 10;
--------------
TYPE my_rom IS ARRAY (0 TO 20) OF STD_LOGIC_VECTOR(0 TO 20);
CONSTANT round_shape: my_rom :=( "000000001111100000000",
"000000111111111000000",
"000011111111111110000",
"000011111111111110000",
"001100111111111001100",
"001110011111110011100",
"011110011111110011110",
"011110011111110011110",
"111111001111100111111",
"111111001111100111111",
"111111001111100111111",
"111111001111100111111",
"111111001111100111111",
"011110011111110011110",
"011110011111110011110",
"001110011111110011100",
"001100111111111001100",
"000011111111111110000",
"000011111111111110000",
"000000111111111000000",
"000000001111100000000" );
BEGIN 
-- create paddle one
paddle_x_left <= frame_thickness + left_of_screen + 1; 
paddle_x_right <= paddle_x_left + paddle_width;
paddle_y_bottom <= paddle_y_top + paddle_height;
-- create paddle two
paddle_x_left_2 <= right_of_screen - frame_thickness - paddle_width - 1;
paddle_x_right_2 <= paddle_x_left_2 + paddle_width;
paddle_y_bottom_2 <= paddle_y_top_2 + paddle_height;
-- set up the objects
size <= round_shape'LENGTH-1; 
objects <= ball_on&wall_on&paddle_on&paddle_on_2;
-- color the objects
setcolor: PROCESS (objects)
BEGIN
CASE objects IS
WHEN "1000" =>
red <=  (OTHERS => '0');  -- make tennis ball green
green <= (OTHERS => '1');
blue  <= (OTHERS => '0');
WHEN "0100" =>
red <=  (OTHERS => '0');  -- make wall black
green <= (OTHERS => '0');
blue  <= (OTHERS => '0');
WHEN "0010" =>
red <=  (OTHERS => '1');  -- make player one red
green <= (OTHERS => '0');
blue  <= (OTHERS => '0');
WHEN "0001" =>
red <=  (OTHERS => '0');  -- make player two blue
green <= (OTHERS => '0');
blue  <= (OTHERS => '1');
WHEN OTHERS =>
red <=  (OTHERS => '1');  -- make tennis court white
green <= (OTHERS => '1');
blue  <= (OTHERS => '1'); 
END CASE;
END PROCESS;
------------------------------------

paddle_motion: PROCESS 
-- control buttons for player one

BEGIN
WAIT UNTIL (vsync'EVENT AND vsync = '1');           
IF pushbuttom_top = '0' THEN 
paddle_y_top <= paddle_y_top + 4;
ELSIF 
pushbuttom_bottom = '0' THEN
paddle_y_top <= paddle_y_top - 4;
END IF;  
END PROCESS; 

------------------------------------ 

paddle_motion_2: PROCESS 
-- control buttons for player two

BEGIN
WAIT UNTIL (vsync'EVENT AND vsync = '1');           
IF pushbuttom_top_2 = '0' THEN 
paddle_y_top_2 <= paddle_y_top_2 + 4;
ELSIF pushbuttom_bottom_2 = '0' THEN
paddle_y_top_2 <= paddle_y_top_2 - 4;
END IF;  
END PROCESS; 

------------------------------------

check_ball: PROCESS (ball_x_pos, ball_y_pos, pixel_column, pixel_row, size)
-- check if pixel is located within the ball square

BEGIN                                 
IF ( (pixel_column >= ball_x_pos) AND -- ball on
(pixel_column <= ball_x_pos + size) AND 
(pixel_row >= ball_y_pos) AND 
(pixel_row <= ball_y_pos + size) ) THEN
ball_on <= round_shape(pixel_row - ball_y_pos)(pixel_column - ball_x_pos); 
  ELSE -- ball off
ball_on <= '0';
END IF;
END PROCESS;

--------------------------------

check_paddle: PROCESS (pixel_column, pixel_row)
-- display player one

BEGIN                                 
IF ( (pixel_column >= paddle_x_left) AND 
(pixel_column <= paddle_x_right) AND 
(pixel_row >= paddle_y_top) AND 
(pixel_row <= paddle_y_bottom)) THEN
paddle_on <= '1';
  ELSE
paddle_on <= '0';
END IF;
END PROCESS;

--------------------------------

check_paddle2: PROCESS (pixel_column, pixel_row)
-- display player two

BEGIN                                 
IF ( (pixel_column >= paddle_x_left_2) AND
(pixel_column <= paddle_x_right_2) AND
(pixel_row >= paddle_y_top_2) AND
(pixel_row <= paddle_y_bottom_2)) THEN
paddle_on_2 <= '1';
  ELSE
paddle_on_2 <= '0';
END IF;
END PROCESS;

--------------------------------

check_wall: PROCESS (pixel_column, pixel_row)
-- create the black lines for the tennis court

BEGIN                                 
IF ( ((pixel_column >= left_of_screen) AND (pixel_column <= left_of_screen + frame_thickness)) OR 
((pixel_column >= right_of_screen - frame_thickness) AND (pixel_column <= right_of_screen)) OR
((pixel_row >= top_of_screen) AND (pixel_row <= top_of_screen + frame_thickness)) OR
((pixel_row >= bottom_of_screen - frame_thickness) AND (pixel_row <= bottom_of_screen)) OR
((pixel_column >= divider_left) AND (pixel_column <= divider_right)) OR
((pixel_column >= serviceL_left) AND (pixel_column <= serviceL_right)) OR 
((pixel_column >= serviceR_left) AND (pixel_column <= serviceR_right)) OR
((pixel_row >= middivide_top) AND (pixel_row <= middivide_bottom) AND ((pixel_column >= middivide_left) AND (pixel_column <= middivide_right))) ) THEN
wall_on <= '1';
  ELSE
wall_on <= '0';
END IF;
END PROCESS;

------------------------------------
x_motion: PROCESS 
-- update horizontal position of ball
BEGIN 
WAIT UNTIL (vsync'EVENT AND vsync = '1'); 

-- if at right of monitor... 
IF ( ((ball_x_pos + size) >= paddle_x_left_2) AND
((ball_y_pos + size) >= paddle_y_top_2) AND 
((ball_y_pos) <= paddle_y_bottom_2) AND 
((ball_x_pos + size) >= paddle_x_right_2) ) THEN
IF (ball_x_motion = 2) THEN -- and moving to the right...
p2_score <= p2_score + 1; -- ...give a point to player two
player2_score <= p2_score;
ELSIF ( (p1_score>9) OR (p2_score>9) ) THEN -- if either player has won, reset scores
p1_score <= 0;
p2_score <= 0;
player1_score <= p1_score;
player2_score <= p2_score;
END IF; 
ball_x_motion <= - 3; -- ball moves left at 3px
-- if at left of monitor...
ELSIF ( (ball_x_pos <= paddle_x_right) AND
((ball_y_pos + size) >= paddle_y_top) AND 
((ball_y_pos) <= paddle_y_bottom) AND 
(ball_x_pos >= paddle_x_left) ) THEN
IF (ball_x_motion = -3) THEN -- and moving to the left...
p1_score <= p1_score + 1; --- ...give a point to player one
player1_score <= p1_score;
ELSIF ((p1_score>9) or (p2_score>9)) THEN -- if either player has won, reset scores
p1_score <= 0;
p2_score <= 0;
player1_score <= p1_score;
player2_score <= p2_score;
END IF;
ball_x_motion <= 2; -- ball moves right at 2px
-- prevent ball from drifting off-screen
ELSIF (ball_x_pos <= left_of_screen) THEN
ball_x_motion <= 2;
ELSIF (ball_x_pos >= right_of_screen) THEN
ball_x_motion <= -3;

END IF; 

ball_x_pos <= ball_x_pos + ball_x_motion; -- compute next position in the x-axis 
END PROCESS; 
------------------------------------
y_motion: PROCESS 
-- update vertical position of ball
BEGIN 
WAIT UNTIL (vsync'event AND vsync = '1'); 
IF (ball_y_pos + size) >= bottom_of_screen - frame_thickness  THEN -- if at bottom of monitor   
ball_y_motion <= - 2;
ELSIF ball_y_pos <= top_of_screen + frame_thickness THEN -- if at top of monitor          
ball_y_motion <= 2;
ELSIF (ball_x_pos <= paddle_x_left) OR (ball_x_pos >= paddle_x_right_2) THEN -- if out of court
ball_y_pos <= center_y; -- return to center of screen
END IF; 
ball_y_pos <= ball_y_pos + ball_y_motion; -- compute next position in the y-axis 
END PROCESS;

------------------------------------

END;
